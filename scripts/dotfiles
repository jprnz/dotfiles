#!/bin/bash
set -eo pipefail

export DOTREPO="git@github.com:jprnz/dotfiles.git"
export DOTDIR="$HOME/.dotfiles"
export DOTBAK="$HOME/.dotfiles.bak"

function dotfiles {
   git --git-dir=$DOTDIR --work-tree=$HOME "$@"
}

function error {
  echo "Error: $@"
  exit 1
}

function check_dirty {
  echo "$(dotfiles status --porcelain)"
}

function checkout_backup {
  bak_files=()
  echo -e "\nChecking for potential conflicts..."
  dot_files=($(dotfiles status --porcelain | awk '{if ($1 == "D") {print $2}}'))
  for file in ${dot_files[@]}; do
    if [ -e $HOME/$file ]; then
        bak_files+=($file)
    elif [ -L $HOME/$file ]; then
        rm $HOME/$file
    else
        continue
    fi
  done

  # Then copy / remove files
  if [ ! -z "$bak_files" ]; then
    echo -e "Checkout detected the following files already exist:"
    echo -e "$(printf "  %s\n" ${bak_files[@]})"
    echo -e "These files will be moved to $DOTBAK"
    echo -e "Existing backups will be written over (ctrl-c to abort)\n" 
    sleep 1

    rsync \
      -a \
      --remove-source-files \
      --files-from=<(printf "%s\n" "${bak_files[@]}") \
      "$HOME" "$DOTBAK"
  else
    echo "No conflicts found..."
  fi
    
  echo "Checking out dotfiles..."
  dotfiles checkout

  echo "Running post-checkout tasks...."
  # TODO apply attributes from backup directory
  chmod 600 $HOME/.ssh/config

  # Install vim plugins
  command vim -es -u $HOME/.vimrc -i NONE -c 'PlugInstall | qa'
}

function install {
  # Create repo
  (
    [ -d $DOTDIR ] && rm -rf $DOTDIR
    git clone --bare $DOTREPO $DOTDIR
    dotfiles config status.showUntrackedFiles no
  ) || error "Could not clone repo: $DOTREPO"

  # Checkout
  checkout_backup 
  source $HOME/.bash_profile
  echo "All done!"
}

function edit {
  export GIT_DIR=$DOTDIR
  export GIT_WORK_TREE=$HOME
  nvim "${@:2}"
}

# Parse input
if [ -z "$1" ]; then
  dotfiles status
  exit 0
fi

while [[ "$#" -gt 0 ]]; do
  case $1 in
    install) 
      install
      break
      ;;
    edit) 
      edit "$@"
      break
      ;;
    *)
      dotfiles "$@"
      break
      ;;
  esac
done

