#!/bin/bash
set -eo pipefail

export DOTREPO=git@github.com:jprnz/dotfiles.git
export DOTDIR="$HOME/.dotfiles"
export DOTBAK="$HOME/.dotfiles.bak"

function dotfiles {
   git --git-dir=$DOTDIR --work-tree=$HOME "$@"
}

function error {
  echo "Error: $@"
  exit 1
}

function check_dirty {
  echo "$(dotfiles status --porcelain)"
}

function checkout_backup {
  set +e
  echo "Checking out $DOTREPO..."
  res=$(dotfiles checkout 2>&1 && wait)
  if [ $? -eq 0 ]; then
    echo "Checkout sucessful"
  else
    set -e
    files=$(echo "$res" \
      | grep -P "^\s+" \
      | awk {'print $1'})
    echo -e "\nCheckout detected the following files already exist:"
    echo -e "$(echo "$files" | sed -r "s/^/  /")\n"
    echo -e "These files will be moved to $DOTBAK"
    echo -e "Existing backups will be written over (ctrl-c to abort)\n" 
    sleep 1
    set -x
    rsync \
      -aLRJ \
      --remove-source-files \
      --files-from=<(echo "$files") \
      "$HOME" "$DOTBAK"
    dotfiles checkout -q

    # TODO apply attributes from backup directory
    chmod 600 $HOME/.ssh/config

    # Install vim plugins
    vim -es -u vimrc -i NONE -c "PlugInstall" -c "qa"
  fi
  set -e
}

function install {
  # Create repo
  (
    if [ $(check_dirty) ]; then
      error "Existing repo found with uncommited changes!"
    fi

    [ -d $DOTDIR ] && rm -rf $DOTDIR
    git clone --recursive --bare $DOTREPO $DOTDIR
    dotfiles config status.showUntrackedFiles no
  ) || error "Could not clone repo: $DOTREPO"

  # Checkout
  checkout_backup
}

# Parse input
while [[ "$#" -gt 0 ]]; do
  case $1 in
    install) install; shift ;;
    *) dotfiles "$@" ;;
  esac
  shift
done

